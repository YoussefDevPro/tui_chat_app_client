use crate::app::App;
use crate::Page;
use crossterm::event::Event;
use crossterm::event::KeyEvent;
use ratatui::{
    layout::{Alignment, Rect},
    style::{Color, Style},
    text::{Line, Span},
    widgets::{Clear, Paragraph},
    Frame,
};

const ART: &str = r#"
                                                                                                     
         ███████████                                                                                   
      ████         ████                                                                                
    ██               ████                                                                              
   ██   ███████████    ███                                  ███████████ ████     ████   ███████████    
  ███   ████████████     ███                                    ███     ████     ████       ████       
 ██      ███     ████     ██    █████████     █████████         ███     ████     ████       ████       
 ██      ████████████     ██  ████     ███  ████     ████       ███     ████     ████       ████       
 ██     ████████████      ██  ████████████  █████████████       ███     ████     ████       ████       
 ██     ████     ███     ███  ███           ████                ███     ████     ████       ████       
  ███   ██████   █████  ███     █████████     █████████         ███       █████████     ███████████    
   ███                 ███                                                                             
     ███              ███                                                                              
       ███         ████                                                                                
         ████████████                                                                                  
"#;

pub fn handle_event(evt: Event, app: &mut App) {
    if let Event::Key(KeyEvent { .. }) = evt {
        app.page = Page::Chat;
    }
}

pub fn ui(f: &mut Frame, _app: &App) {
    let area = f.area();

    let lines: Vec<Line> = ART.lines().map(|l| Line::from(Span::raw(l))).collect();
    let art_height = lines.len() as u16;

    let art_area = {
        let art_y = area.y + (area.height.saturating_sub(art_height + 4)) / 2;
        Rect {
            x: area.x,
            y: art_y,
            width: area.width,
            height: art_height,
        }
    };

    f.render_widget(Clear, art_area);
    let ascii = Paragraph::new(lines).alignment(Alignment::Center);
    f.render_widget(ascii, art_area);

    let copilot_area = Rect {
        x: area.x,
        y: area.y + area.height.saturating_sub(2),
        width: area.width,
        height: 1,
    };
    let copilot = Paragraph::new("this app may contain code generated by copilot")
        .alignment(Alignment::Center)
        .style(Style::default().fg(Color::Gray));
    f.render_widget(copilot, copilot_area);

    let footer_area = Rect {
        x: area.x,
        y: area.y + area.height.saturating_sub(3),
        width: area.width,
        height: 1,
    };
    let footer_text = Paragraph::new("ReeTui inc.")
        .alignment(Alignment::Center)
        .style(Style::default().fg(Color::Green));
    f.render_widget(footer_text, footer_area);

    let press_area = Rect {
        x: area.x,
        y: area.y + area.height.saturating_sub(5),
        width: area.width,
        height: 1,
    };
    let top_text = Paragraph::new("Press any key to continue")
        .alignment(Alignment::Center)
        .style(Style::default().fg(Color::Gray));
    f.render_widget(top_text, press_area);
}
