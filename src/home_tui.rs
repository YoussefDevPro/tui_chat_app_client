use crate::app::App;
use crate::Page;
use crossterm::event::Event;
use crossterm::event::KeyEvent;
use ratatui::{
    layout::{Alignment, Constraint, Direction, Rect},
    style::{Color, Style},
    text::{Line, Span},
    widgets::{Block, Borders, Clear, Paragraph},
    Frame,
};

const ART: &str = r#"
                                                                                                     
         ███████████                                                                                   
      ████         ████                                                                                
     █               ████                                                                              
   ██   ███████████    ███                                  ███████████ ████     ████   ███████████    
  ███   ████████████     ███                                    ███     ████     ████       ████       
 ██     ████     ███      ██    █████████     █████████         ███     ████     ████       ████       
 ██     ████████████      ██  ███      ███  ████     ████       ███     ████     ████       ████       
 ██     ████████████      ██  ████████████  █████████████       ███     ████     ████       ████       
 ██     ████     ███     ███  ███           ████                ███     ████     ████       ████       
  ███   ██████   █████  ████    █████████     █████████         ███       █████████     ███████████    
   ███                 ███                                                                             
     ███              ███                                                                              
       ███         ████                                                                                
         ████████████                                                                                  
"#;

pub fn handle_event(evt: Event, app: &mut App) {
    if let Event::Key(KeyEvent { .. }) = evt {
        app.page = Page::Chat;
    }
}

pub fn ui(f: &mut Frame, _app: &App) {
    let area = centered_rect(70, 22, f.area());
    f.render_widget(Clear, area);

    let block = Block::default().borders(Borders::ALL).title("ReeTui Home");
    f.render_widget(block, area);

    // Convert ASCII art to Lines for ratatui 0.29+
    let lines: Vec<Line> = ART.lines().map(|l| Line::from(Span::raw(l))).collect();
    let ascii = Paragraph::new(lines).alignment(Alignment::Center);
    let art_height = ART.lines().count() as u16;
    let art_area = Rect {
        x: area.x,
        y: area.y + 2,
        width: area.width,
        height: art_height,
    };
    f.render_widget(ascii, art_area);

    // Press any key at the top
    let top_text = Paragraph::new("Press any key to continue")
        .alignment(Alignment::Center)
        .style(Style::default().fg(Color::Gray));
    let top_area = Rect {
        x: area.x,
        y: area.y + 1,
        width: area.width,
        height: 1,
    };
    f.render_widget(top_text, top_area);

    // Title at the bottom
    let footer_text = Paragraph::new("ReeTui inc.")
        .alignment(Alignment::Center)
        .style(Style::default().fg(Color::Green));
    let footer_area = Rect {
        x: area.x,
        y: area.y + area.height - 3,
        width: area.width,
        height: 1,
    };
    f.render_widget(footer_text, footer_area);

    // Copilot notice
    let copilot = Paragraph::new("this app may contain code generated by copilot")
        .alignment(Alignment::Center)
        .style(Style::default().fg(Color::Gray));
    let copilot_area = Rect {
        x: area.x,
        y: area.y + area.height - 2,
        width: area.width,
        height: 1,
    };
    f.render_widget(copilot, copilot_area);
}

// Helper: center a rect
fn centered_rect(percent_x: u16, percent_y: u16, r: Rect) -> Rect {
    let popup_layout = ratatui::layout::Layout::default()
        .direction(Direction::Vertical)
        .constraints([
            Constraint::Percentage((100 - percent_y) / 2),
            Constraint::Percentage(percent_y),
            Constraint::Percentage((100 - percent_y) / 2),
        ])
        .split(r);
    let vertical = popup_layout[1];
    let horizontal_layout = ratatui::layout::Layout::default()
        .direction(Direction::Horizontal)
        .constraints([
            Constraint::Percentage((100 - percent_x) / 2),
            Constraint::Percentage(percent_x),
            Constraint::Percentage((100 - percent_x) / 2),
        ])
        .split(vertical);
    horizontal_layout[1]
}
